nextflow.enable.dsl = 2

params {
    input = null
    library = null
    outdir = 'results'
    exp_name = 'crispin'

    count_table   = null
    design_matrix = null

    enable_conda = false
    publish_dir_mode = "copy"

    cutadapt {
        adapters = '/opt2/TruSeq_and_nextera_adapters.consolidated.fa'  // this is in the cutadapt container
        minlen = 20
        leadingquality = 10
        trailingquality = 10
    }

    mageck {
        run = true
    }
    drugz {
        run = true
        remove_genes = null
        half_window_size = 500 // same as default in drugZ https://github.com/hart-lab/drugz/blob/eb15d34e4dd172965e618d5bb662c053066da799/drugz.py#L305-L306
    }
    bagel {
        run = true
        core_essential_genes = '/opt2/bagel-2.0-115/CEGv2.txt' // in Docker container
        non_essential_genes = '/opt2/bagel-2.0-115/NEGv1.txt' // in Docker container
        test_columns = null
    }

}

includeConfig 'conf/base.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    docker {
        docker.enabled = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "/data/$USER/.singularity" // TODO this may be a different default on other (non biowulf) platforms
        envWhitelist='https_proxy,http_proxy,ftp_proxy,DISPLAY,SLURM_JOBID,SINGULARITY_BINDPATH'
    }
    biowulf {
        includeConfig "conf/biowulf.config"
    }
    slurm {
        includeConfig "conf/slurm.config"
    }
    interactive {
        includeConfig "conf/interactive.config"
    }
    ci_stub {
        includeConfig "conf/ci_stub.config"
    }
    test {
        includeConfig "conf/test.config"
    }
    test_mle {
        includeConfig "conf/test_mle.config"
    }
}

includeConfig 'conf/containers.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
    // prevent python from creating pycache files
    PYTHONDONTWRITEBYTECODE = 'true'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.png"
}

includeConfig 'conf/modules.config'

String pipeline_version = new File("${projectDir}/VERSION").text

manifest {
    name = "CCBR/CRISPIN"
    author = "CCR Collaborative Bioinformatics Resource"
    homePage = "https://github.com/CCBR/CRISPIN"
    description = "CRISPR screen pipeline"
    mainScript = "main.nf"
    defaultBranch = "main"
    version = "${pipeline_version}"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
